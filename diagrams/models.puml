@startuml
'interface Lexer {
'+ lex(char[]): List<Token>
'}
'interface Parser
'interface Interpreter {
'}

'class Runner

'class Token {
'TokenType type
'Integer start
'Integer end
'String value
'}

'interface Token {
'getStart(): Integer
'getEnd(): Integer
'getValue(): String
'}
'
'class StringToken implements Token {
'
'}
'
'class NumberToken implements Token {
'
'}

class Token {
- type: TokenType
- start
- end
- value
}
interface TokenType {
}
enum TokenTypes implements TokenType {
LET_KEYWORD
TYPE
ASSIGNATION
IDENTIFIER
SEMICOLON
COLON
IF
ELSE
LITERAL
BINARY_OPERATOR

etc.
}
Token -> TokenType

'class Ast {
'    AstType type
'    List<Ast> children
'}
'
'Ast --> AstType
'
'interface AstType {
'
'}

'enum AstTypes implements AstType {
'    DECLARATION
'    ASSIGNATION
'    LITERAL
'    VALUE
'    STRING_TYPE
'    NUMBER_TYPE
'    IDENTIFIER
'    IF_STATEMENT
'    BINARY_EXPRESSION
'    BLOCK_STATEMENT
'
'}

'Ast *-> Ast

'Runner --> Lexer
'Runner --> Parser
'Runner --> Interpreter

'Ast *-> Token
'
'Lexer --> Token
'Parser --> Token
'Parser --> Ast
'Interpreter --> Ast

'interface AstComponent {
'
'}
'
'class Literal implements AstComponent
'class Identifier implements AstComponent
'
'class Declaration implements AstComponent, Composite {
'- children: List<AstComponent>
'}
'class IfStatement implements AstComponent, Composite {
'- children: List<AstComponent>
'}
'class Assignation implements AstComponent, Composite {
'- children: List<AstComponent>
'}
'
'interface Composite {
'+ getChildren(): List<AstComponent>
'}
'
'enum PlainAstComponent implements AstComponent {
'    STRING_TYPE
'    NUMBER_TYPE
'}
enum DeclarationType {
    NUMBER
    STRING
    FUNCTION
}
enum IdentifierType {
    VARIABLE
    FUNCTION
}
enum BinaryOperator {
    SUM
    SUBTRACTION
    DIVISION
    MULTIPLICATION
}
interface AstComponent
class Assignation implements AstComponent {
    -leftComponent: AstComponent
    -rightComponent: AstComponent
}
class Declaration implements AstComponent {
    -type: DeclarationType
    -name: String
}
class Identifier implements AstComponent {
    -type: IdentifierType
    -name: String
}
class BinaryExpression implements AstComponent {
    -operator: BinaryOperator
    -leftComponent: AstComponent
    -rightComponent: AstComponent
}
class Literal<T> implements AstComponent {
    -value: T
}
class IfStatement implements AstComponent {
    -conditional: Conditional
    -trueClause: AstComponent
    -falseClause: AstComponent
}
class Conditional implements AstComponent {
    -condition: AstComponent
}
class FunctionCall implements AstComponent {
    -identifier: Identifier
    -parameters: Parameters
}
class Parameters implements AstComponent {
    -parameters: AstComponent
}
Declaration *-- DeclarationType
Identifier *-- IdentifierType
BinaryExpression *-- BinaryOperator


@enduml