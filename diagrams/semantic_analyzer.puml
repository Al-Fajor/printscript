@startuml

interface Visitor<Resolution> {
    + visit(statement: AssignationStatement): Resolution
    + visit(statement: Literal): Resolution
    ... ()
}

interface SemanticAnalyzer extends Visitor<Resolution> {
    + analyze(List<AstComponent> asts): SemanticResult
}

class AnalyzerImpl implements SemanticAnalyzer {
    + analyze(List<AstComponent> asts): SemanticResult
}

interface SemanticResult {
    + isSuccessful(): boolean
    + getErrorMessage(): String
}

class SemanticSuccess implements SemanticResult {
    + isSuccessful(): boolean
    + getErrorMessage(): String
}
class SemanticFailure implements SemanticResult {
    - errorMessage: String
    + isSuccessful(): boolean
    + getErrorMessage(): String
}

class Resolution {
    - result: SemanticResult
    - evaluatedType: DeclarationType
    - identifierName: String
    - resolvedDeclarations: Set<Declaration>
}

class ResolutionValidator {
    + analyze(resolution: Resolution, environment: Environment): Resolution
}

SemanticAnalyzer -> SemanticResult
AnalyzerImpl --> ResolutionValidator
ResolutionValidator *-> ResolutionValidator
Visitor -> Resolution

@enduml